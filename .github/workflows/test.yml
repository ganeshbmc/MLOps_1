name: CI/CD with CML

on: [pull_request]

permissions:
  contents: read
  pull-requests: write

jobs:
  run-tests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          environment-file: environment.yml
          activate-environment: iris_env_c
          auto-activate-base: false
          miniforge-variant: Miniforge3

      - name: Install required Python packages (pytest, dvc-gs)
        shell: bash -l {0}
        run: |
          conda activate iris_env_c
          pip install pytest dvc-gs

      - name: Authenticate to Google Cloud
        run: |
          echo "$GCP_SERVICE_ACCOUNT_KEY" > gcp-key.json
          export GOOGLE_APPLICATION_CREDENTIALS=$(pwd)/gcp-key.json
          gcloud auth activate-service-account --key-file=$GOOGLE_APPLICATION_CREDENTIALS
        shell: bash
        env:
          GCP_SERVICE_ACCOUNT_KEY: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}


      - name: DVC Pull Data
        shell: bash -l {0}
        run: |
          export GOOGLE_APPLICATION_CREDENTIALS=$(pwd)/gcp-key.json
          conda activate iris_env_c
          dvc pull --force
          ls data/
          ls artifacts/

      - name: Run tests and create report
        shell: bash -l {0}
        run: |
          conda activate iris_env_c
          echo "## Test Report" > report.md
          pytest -s tests/ --tb=short -p no:warnings >> report.md || true

      - name: Set up CML
        uses: iterative/setup-cml@v2

      - name: Comment on PR with test results
        env:
          REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cml comment create report.md

      - name: Authenticate to Google Cloud and setup GKE
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: polar-pillar-461115-g2
          service_account_key: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
          install_components: 'gke-gcloud-auth-plugin' # Installs the GKE auth plugin
          # No need to explicitly install kubectl here, setup-gcloud can also handle it,
          # or it's often included with the gcloud SDK.

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker us-central1-docker.pkg.dev

      - name: Print current directory and contents
        run: |
          pwd
          ls -R

      - name: Build Docker Image
        run: |
          docker build -t us-central1-docker.pkg.dev/polar-pillar-461115-g2/my-repo/iris-api:latest docker_demo

      - name: Push Docker Image to Artifact Registry
        run: |
          docker push us-central1-docker.pkg.dev/polar-pillar-461115-g2/my-repo/iris-api:latest

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3

      - name: Get GKE credentials
        run: |
          gcloud container clusters get-credentials demo-gke-iris-cluster \
            --zone us-central1 \
            --project polar-pillar-461115-g2

      - name: Deploy latest image to GKE
        run: |
          kubectl set image deployment/demo-iris-workload iris-api-sha256-1=us-central1-docker.pkg.dev/polar-pillar-461115-g2/my-repo/iris-api:latest

      - name: Comment on PR that CD was successful
        shell: bash
        env:
          REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Extract LoadBalancer IP (if available)
          EXTERNAL_IP=$(kubectl get service demo-iris-workload-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          # Extract deployed image SHA digest
          IMAGE_DIGEST=$(kubectl get deployment demo-iris-workload -o=jsonpath='{.spec.template.spec.containers[0].image}' | cut -d'@' -f2)

          echo "## âœ… CD Success ðŸš€" > cd_success.md
          echo "" >> cd_success.md
          echo "âœ… The Docker image was successfully built and pushed to Artifact Registry." >> cd_success.md
          echo "âœ… Deployment to GKE cluster \`demo-gke-iris-cluster\` was completed." >> cd_success.md
          echo "" >> cd_success.md

          if [ -n "$EXTERNAL_IP" ]; then
            echo "**Access URL:** [http://$EXTERNAL_IP](http://$EXTERNAL_IP)" >> cd_success.md
          else
            echo "**Access URL:** LoadBalancer IP not yet available (may take a few seconds to provision)." >> cd_success.md
          fi

          echo "" >> cd_success.md
          echo "**Deployed Image Digest:** \`$IMAGE_DIGEST\`" >> cd_success.md

          cml comment create cd_success.md

